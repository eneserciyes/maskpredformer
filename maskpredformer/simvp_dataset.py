# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_simvp_dataset.ipynb.

# %% auto 0
__all__ = ['DEFAULT_DATA_PATH', 'DLDataset', 'show_video_line']

# %% ../nbs/01_simvp_dataset.ipynb 2
from torch.utils.data import Dataset
import torch
import os
import matplotlib.pyplot as plt

# %% ../nbs/01_simvp_dataset.ipynb 3
DEFAULT_DATA_PATH = "/home/enes/dev/maskpredformer/data"

# %% ../nbs/01_simvp_dataset.ipynb 4
class DLDataset(Dataset):
    def __init__(self, root, mode):
        self.mask_path = os.path.join(root, f"{mode}_masks.pt")
        print("INFO: Loading masks from", self.mask_path)
        self.masks = torch.load(self.mask_path)

    def __len__(self):
        return self.masks.shape[0]
    
    def __getitem__(self, idx):
        data = self.masks[idx, :11].long()
        labels = self.masks[idx, 11:].long()
        return data, labels

# %% ../nbs/01_simvp_dataset.ipynb 5
def show_video_line(data, ncols, vmax=48, vmin=0, cmap='tab20b', cbar=False, format='png', out_path=None):
    fig, axes = plt.subplots(nrows=1, ncols=ncols, figsize=(3.25*ncols, 3))
    plt.subplots_adjust(wspace=0.01, hspace=0)
    images = []
    if ncols == 1:
        im = axes.imshow(data[0], cmap=cmap, vmin=vmin, vmax=vmax)
        images.append(im)
        axes.axis('off')
        im.set_clim(vmin, vmax)
    else:
        for t, ax in enumerate(axes.flat):
            im = ax.imshow(data[t], cmap=cmap, vmin=vmin, vmax=vmax)
            images.append(im)
            ax.axis('off')
            im.set_clim(vmin, vmax)
    if cbar and ncols > 1:
        cbaxes = fig.add_axes([0.9, 0.15, 0.04 / ncols, 0.7]) 
        cbar = fig.colorbar(im, ax=axes.ravel().tolist(), shrink=0.1, cax=cbaxes)

    plt.show()
    if out_path is not None:
        fig.savefig(out_path, format=format, pad_inches=0, bbox_inches='tight')
    plt.close()
